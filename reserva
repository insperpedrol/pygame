# # Carregando a imagem de plano de fundo
# background_image = pygame.image.load("sprites/graphics/fundo.png").convert()

# # Função para redimensionar as imagens dos jogadores
# def resize_image(image, width, height):
#     return pygame.transform.scale(image, (width, height))

# # Carregando os sprites dos jogadores e redimensionando
# player_idle = resize_image(pygame.image.load("sprites/graphics/player1.png"), 30, 30)
# player_run1 = resize_image(pygame.image.load("sprites/graphics/playerrun1.png"), 30, 30)
# player_run2 = resize_image(pygame.image.load("sprites/graphics/playerrun2.png"), 30, 30)
# player_run3 = resize_image(pygame.image.load("sprites/graphics/playerrun3.png"), 30, 30)
# player_jump = resize_image(pygame.image.load("sprites/graphics/playerjump.png"), 30, 30)

# # Carregando a imagem da caixa e redimensionando
# box_image = resize_image(pygame.image.load("sprites/graphics/piso1.png"), 40, 40)

# # Carregando a imagem do fogo e redimensionando
# fire_block_image=resize_image(pygame.image.load("sprites/graphics/fogo.png"),25,25)


# # Lista de sprites para animação de corrida
# run_sprites = [player_run1, player_run2, player_run3]
# current_run_sprite = 0

# # Definindo as coordenadas das plataformas
# platform_coordinates = [
#     (0  , 80), (40 , 80), (80, 80), (120, 80), (160, 80), (200, 80), (460, 80), (500, 80), (540, 80),
#     (0  , 200), (40 , 200), (150, 200), (190, 200), (230, 200), (270, 200), (300, 200), (340, 200), (380, 200), (420, 200), (460, 200),
#     (0, 320), (40 ,320), (80, 320), (120, 320), (160, 320), (200, 320), (240, 320), (280 ,320), (320, 320), (360, 320), (400, 320), (440, 320),
#     (0  , 440), (40 , 440), (120, 440), (160, 440), (240, 440), (280, 440), (320, 440), (360 ,440), (440, 440), (480  , 440), (520 , 440), (560, 440),
#     (40, 560), (80 ,560), (160 ,560), (200, 560), (280, 560), (320, 560), (400 ,560), (440 ,560),
#     (0, 680), (40, 680), (80, 680), (120, 680), (160, 680), (200, 680), (280, 680), (320, 680), (360, 680), (400, 680), (440, 680), (480, 680), (520, 680), (560, 680),
#     (0, 770), (40, 770), (80, 770), (120, 770), (160, 770), (200, 770), (240, 770), (280, 770), (320, 770), (360, 770), (400, 770), (440, 770), (480, 770), (520, 770), (560, 770)
# ]

# # Definindo as coordenadas dos blocos de fogo
# fire_block_coordinates = [
#     (90, 80), (115, 80), (130, 80), (300, 440), (325, 440)
# ]

# # Lista para armazenar os retângulos das plataformas
# platform_rects = []

# # Lista para armazenar os retângulos dos blocos de fogo
# fire_block_rects = []

# # Definindo a constante de gravidade
# GRAVITY = 3

# # Função para criar os blocos de fogo e armazenar seus retângulos
# def create_fire_blocks():
#     for coord in fire_block_coordinates:
#         fire_block_rects.append(coord)

# # Função para criar as plataformas e armazenar seus retângulos
# def create_platforms():
#     for coord in platform_coordinates:
#         platform_rect = box_image.get_rect()
#         platform_rect.topleft = coord
#         platform_rects.append(platform_rect)

# def update_player_movement(player_rect, moving_left, moving_right, jumping, jump_count):
#     on_ground = False
    
#     # Verificar se o jogador está em contato com alguma plataforma
#     for platform_rect in platform_rects:
#         if player_rect.colliderect(platform_rect):
#             # Se a parte de baixo do jogador está acima do topo da plataforma e
#             # a parte superior do jogador está abaixo do centro da plataforma,
#             # então o jogador está em cima da plataforma
#             if player_rect.bottom <= platform_rect.top and player_rect.top >= platform_rect.centery:
#                 on_ground = True
#                 # Reposicionar o jogador no topo da plataforma
#                 player_rect.bottom = platform_rect.top
#                 break

#     # Aplicar a gravidade apenas se o jogador não estiver no chão
#     if not on_ground:
#         player_rect.y += GRAVITY

#     # Se estiver no chão e pressionando a tecla de pulo, permita o pulo
#     if on_ground and jumping:
#         jump_count = 10

#     if jumping:
#         if jump_count >= -10:
#             neg = 1
#             if jump_count < 0:
#                 neg = -1
#             player_rect.y -= (jump_count ** 2) * 0.5 * neg
#             for platform_rect in platform_rects:
#                 if player_rect.colliderect(platform_rect):
#                     if neg == 1:
#                         player_rect.bottom = platform_rect.top
#                     else:
#                         player_rect.top = platform_rect.bottom
#                     jumping = False
#                     break
#             jump_count -= 1
#         else:
#             jumping = False
#             jump_count = 10

#     if moving_left:
#         player_rect.x -= 5
#         for platform_rect in platform_rects:
#             if player_rect.colliderect(platform_rect):
#                 if player_rect.right > platform_rect.left:
#                     player_rect.right = platform_rect.left
#                 break
#     elif moving_right:
#         player_rect.x += 5
#         for platform_rect in platform_rects:
#             if player_rect.colliderect(platform_rect):
#                 if player_rect.left < platform_rect.right:
#                     player_rect.left = platform_rect.right
#                 break

#     return jumping



# # Função para desenhar os blocos de fogo na tela
# def draw_fire_blocks():
#     for fire_block_rect in fire_block_rects:
#         screen.blit(fire_block_image, fire_block_rect)

# # Função para desenhar o jogador na tela
# def draw_player(player_rect, jumping, moving_left, moving_right):
#     if jumping:
#         screen.blit(player_jump, player_rect)
#     elif moving_left or moving_right:
#         if moving_left:
#             screen.blit(pygame.transform.flip(run_sprites[current_run_sprite], True, False), player_rect)
#         else:
#             screen.blit(run_sprites[current_run_sprite], player_rect)
#     else:
#         screen.blit(player_idle, player_rect)

# # Função principal do jogo
# def main():
#     clock = pygame.time.Clock()

#     create_platforms()
#     create_fire_blocks()

#     # Definindo o retângulo para o jogador
    
#     player_rect = player_idle.get_rect()
#     player_rect.topleft = (40,0)

#     # Variáveis para controle de movimento do jogador
#     moving_left = False
#     moving_right = False
#     jumping = False
#     jump_count = 10

#     # Definindo a variável para a animação de corrida
#     current_run_sprite = 0

#     while True:
#         screen.blit(background_image, (0, 0))  # Desenha a imagem de plano de fundo

#         # Desenhe as plataformas na tela
#         for platform_rect in platform_rects:
#             screen.blit(box_image, platform_rect)

#         for event in pygame.event.get():
#             if event.type == pygame.QUIT:
#                 pygame.quit()
#                 sys.exit()
#             elif event.type == pygame.KEYDOWN:
#                 if event.key == pygame.K_a:
#                     moving_left = True
#                 elif event.key == pygame.K_d:
#                     moving_right = True
#                 elif event.key == pygame.K_w:
#                     if not jumping:
#                         jumping = True
#                         jump_count = 10

                
#             elif event.type == pygame.KEYUP:
#                 if event.key == pygame.K_a:
#                     moving_left = False
#                 elif event.key == pygame.K_d:
#                     moving_right = False

#         current_run_sprite = (current_run_sprite + 1) % len(run_sprites)
#         update_player_movement(player_rect, moving_left, moving_right, jumping, jump_count)

#         # Desenhar os blocos de fogo na tela
#         draw_fire_blocks()

#         # Desenhar o jogador na tela
#         draw_player(player_rect, jumping, moving_left, moving_right)

#         # Atualizando a tela
#         pygame.display.flip()
#         clock.tick(FPS)

# # Chamando a função principal para iniciar o jogo
# if __name__ == "__main__":
#     main()